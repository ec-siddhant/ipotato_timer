// Mocks generated by Mockito 5.3.2 from annotations
// in ipotato_timer/test/tasks_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:ipotato_timer/models/task_model.dart' as _i4;
import 'package:ipotato_timer/stores/tasks_store.dart' as _i3;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObservableList_0<T> extends _i1.SmartFake
    implements _i2.ObservableList<T> {
  _FakeObservableList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksStore extends _i1.Mock implements _i3.TasksStore {
  MockTasksStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ObservableList<_i4.TaskModel> get taskList => (super.noSuchMethod(
        Invocation.getter(#taskList),
        returnValue: _FakeObservableList_0<_i4.TaskModel>(
          this,
          Invocation.getter(#taskList),
        ),
      ) as _i2.ObservableList<_i4.TaskModel>);
  @override
  set taskList(_i2.ObservableList<_i4.TaskModel>? _taskList) =>
      super.noSuchMethod(
        Invocation.setter(
          #taskList,
          _taskList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);
  @override
  dynamic addTask(_i4.TaskModel? taskModel) =>
      super.noSuchMethod(Invocation.method(
        #addTask,
        [taskModel],
      ));
  @override
  dynamic addAllTasks(List<dynamic>? tableDataList) =>
      super.noSuchMethod(Invocation.method(
        #addAllTasks,
        [tableDataList],
      ));
  @override
  dynamic reduceTaskTime({required int? index}) =>
      super.noSuchMethod(Invocation.method(
        #reduceTaskTime,
        [],
        {#index: index},
      ));
  @override
  dynamic setTaskAsComplete({required int? index}) =>
      super.noSuchMethod(Invocation.method(
        #setTaskAsComplete,
        [],
        {#index: index},
      ));
  @override
  void playSound() => super.noSuchMethod(
        Invocation.method(
          #playSound,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
